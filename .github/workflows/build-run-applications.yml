name: Build ESP-BSP apps

# This job builds all examples and test_applications in this repo
# Applications are selected for build based on changes files and dependencies defined in .build-test-rules.yml

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  build:
    strategy:
      matrix:
        include:
          - idf_ver: "latest"
            parallel_count: 5
            parallel_index: 1
          - idf_ver: "latest"
            parallel_count: 5
            parallel_index: 2
          - idf_ver: "latest"
            parallel_count: 5
            parallel_index: 3
          - idf_ver: "latest"
            parallel_count: 5
            parallel_index: 4
          - idf_ver: "latest"
            parallel_count: 5
            parallel_index: 5
          #- idf_ver: "release-v5.1"
          #  parallel_count: 2
          #  parallel_index: 1
          #- idf_ver: "release-v5.1"
          #  parallel_count: 2
          #  parallel_index: 2
          #- idf_ver: "release-v5.2"
          #  parallel_count: 2
          #  parallel_index: 1
          #- idf_ver: "release-v5.2"
          #  parallel_count: 2
          #  parallel_index: 2
          #- idf_ver: "release-v5.3"
          #  parallel_count: 2
          #  parallel_index: 1
          #- idf_ver: "release-v5.3"
          #  parallel_count: 2
          #  parallel_index: 2
          #- idf_ver: "release-v5.4"
          #  parallel_count: 2
          #  parallel_index: 1
          #- idf_ver: "release-v5.4"
          #  parallel_count: 2
          #  parallel_index: 2
    runs-on: ubuntu-latest
    container: espressif/idf:${{ matrix.idf_ver }}
    steps:
      - uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          separator: ';' # idf-build-apps expects files seprated with semicolon

      - name: Build ESP-BSP applications
        shell: bash
        env:
          IDF_EXTRA_ACTIONS_PATH: "${{ github.workspace }}/examples"
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_modified_files }}
        run: |
          . ${IDF_PATH}/export.sh
          pip install idf-component-manager==1.* ruamel.yaml idf-build-apps==2.4.3 --upgrade

          echo "Files changed: ${ALL_CHANGED_FILES}"
          idf-build-apps find --modified-files "${ALL_CHANGED_FILES}"
          idf-build-apps build --parallel-count ${{ matrix.parallel_count }} --parallel-index ${{ matrix.parallel_index }} --modified-files "${ALL_CHANGED_FILES}" --collect-app-info build_info_${{ matrix.idf_ver }}_${{ matrix.parallel_index }}.json

      - uses: actions/upload-artifact@v4
        if: github.repository_owner == 'espressif' && needs.prepare.outputs.build_only == '0'
        with:
          name: app_binaries_${{ matrix.idf_ver }}_${{ matrix.parallel_index }}
          path: |
            examples/*/build_*/bootloader/bootloader.bin
            examples/*/build_*/partition_table/partition-table.bin
            examples/*/build_*/*.bin
            examples/*/build_*/flasher_args.json
            examples/*/build_*/config/sdkconfig.json
            build_info*.json

  run-target:
    name: Run apps
    if: github.repository_owner == 'espressif' && needs.prepare.outputs.build_only != '1'
    needs: build
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        idf_ver:
          - "latest"
        runner:
          # - runs-on: "esp-box-3"
          #   marker: "esp_box_3"
          #   target: "esp32s3"
          # - runs-on: "esp32_c3_lcdkit"
          #   marker: "esp32_c3_lcdkit"
          #   target: "esp32c3"
          # - runs-on: "esp32_p4_box"
          #   marker: "esp32_p4_box"
          #   target: "esp32p4"
          - runs-on: "esp32_p4_function_ev_board"
            marker: "esp32_p4_function_ev_board"
            target: "esp32p4"
          # - runs-on: "esp32_s3_eye"
          #   marker: "esp32_s3_eye"
          #   target: "esp32s3"
          # - runs-on: "esp32_s3_lcd_ev_board"
          #   marker: "esp32_s3_lcd_ev_board"
          #   target: "esp32s3"
          # - runs-on: "esp32_s3_lcd_ev_board"
          #   marker: "esp32_s3_lcd_ev_board_2"
          #   target: "esp32s3"
          # - runs-on: "esp32_s3_usb_otg"
          #   marker: "esp32_s3_usb_otg"
          #   target: "esp32s3"
          # - runs-on: "esp_wrover_kit"
          #   marker: "esp_wrover_kit"
          #   target: "esp32"
          # - runs-on: "m5dial"
          #   marker: "m5dial"
          #   target: "esp32s3"
          # - runs-on: "m5stack_core"
          #   marker: "m5stack_core"
          #   target: "esp32"
          # - runs-on: "m5stack_core_2"
          #   marker: "m5stack_core_2"
          #   target: "esp32"
          # - runs-on: "m5stack_core_s3"
          #   marker: "m5stack_core_s3"
          #   target: "esp32s3"
          # - runs-on: "m5stack_core_s3"
          #   marker: "m5stack_core_s3_se"
          #   target: "esp32s3"
          # - runs-on: "esp32_azure_iot_kit"
          #   marker: "esp32_azure_iot_kit"
          #   target: "esp32"
          # - runs-on: "esp_bsp_devkit"
          #   marker: "esp_bsp_devkit"
          #   target: "esp32s3"
          # - runs-on: "esp_bsp_generic"
          #   marker: "esp_bsp_generic"
          #   target: "esp32s3"
    env:
      TEST_RESULT_NAME: test_results_${{ matrix.runner.target }}_${{ matrix.runner.marker }}_${{ matrix.idf_ver }}
      TEST_RESULT_FILE: test_results_${{ matrix.runner.target }}_${{ matrix.runner.marker }}_${{ matrix.idf_ver }}.xml
    runs-on: [self-hosted, Linux, bspwall]
    container:
      image: python:3.11-bookworm
      options: --privileged -v /dev/boards:/dev/boards/ # Privileged mode has access to serial ports
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: app_binaries_${{ matrix.idf_ver }}_*
          merge-multiple: true
      - name: Install Python packages
        env:
          PIP_EXTRA_INDEX_URL: "https://dl.espressif.com/pypi/"
        run: pip install --prefer-binary cryptography pytest-embedded pytest-embedded-serial-esp pytest-embedded-idf pytest-custom_exit_code
      - name: Set ignores
        id: set_ignores
        if: ${{ github.event.label.name == 'benchmark' }}
        env:
          IGNORES: --ignore='*/examples/display_lvgl_benchmark/*'
      - name: Run apps
        run: |
          pytest --suppress-no-test-exit-code --ignore-glob '*/managed_components/*' --ignore=.github ${{ env.IGNORES }} --junit-xml=${{ env.TEST_RESULT_FILE }} --target=${{ matrix.runner.target }} -m ${{ matrix.runner.marker }} --build-dir=build_${{ matrix.runner.runs-on }}
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ env.TEST_RESULT_NAME }}
          path: |
            ${{ env.TEST_RESULT_FILE }}
            benchmark_*.md

  publish-results:
    name: Publish Test results
    needs:
      - run-target
    if: github.repository_owner == 'espressif' && always() && github.event_name == 'pull_request' && needs.prepare.outputs.build_only == '0'
    runs-on: ubuntu-22.04
    steps:
      - name: Download Test results
        uses: actions/download-artifact@v4
        with:
          pattern: test_results_*
          path: |
            test_results
            benchmark_*.md
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test_results/**/*.xml
      - name: Find test result files
        id: find_files
        run: |
          files=$(find test_results_* -type f -name "*.md" | jq -R -s -c 'split("\n")[:-1]')
          echo "files=$files" >> $GITHUB_OUTPUT
      - name: Comment PR
        uses: GrantBirki/comment@v2.1.0
        env:
          files: ${{ steps.find_files.outputs.files }}
        with:
          comment-id: benchmark_results
          body: |
            # Files
            {% for file in env.files %}
            - `{{ file }}`
            {% else %}
            - No file
            {% endfor %}
